у нас есть view(рециклвью) <- databinding -> viewmodel <--> model(бизнес логика, запись считывание и т.д.)

архитектура mvvm работает таким образом что у нас есть посредник,
мы напрямую из вью не получаем доступ к бизнес логике, мы не управляем записью,
считыванием напрямую, потому что вью зависят от цикла жизни активити и проблема в том
что иногда например если исходящий звонок или ещё что либо и активити входит в анпауз
и так далее и вью недоступно и возможно с базы данных сервера с удаленных получаем через
интернет какие-то данные и пытаемся обновить наш адаптер а он не доступен и так далее.
И все это нужно самим продумать, но если мы используем такую архитектуру mvvm то у нас есть
посредник и посредник ждет когда вью доступен, тогда его и обновляет и наоборот.
Поэтому когда мы работаем с посредником все становится намного проще