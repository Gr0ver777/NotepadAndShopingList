библиотека рум
implementation 'androidx.room:room-ktx:2.5.1'
kapt 'anroidx.room:room-compiler:2.3.0'
в плагине указывать дополнительные установки типа kotlin-kapt и т.д.


ЕНтити это модель для заполнения таблицы и на основе этой модели создаётся сама таблица
Ентити  избавляет от необходимости писать SQL-код для взаимодействия с СУБД
Аннотация указывает для чего этот класс служит
Один Entity это одна таблица
Переопределив свойство tableName - данное свойство задаёт имя таблицы. В случае,
если бы свойство не было бы определенно, то таблица назвалась аналогично названию класса
@Entity (tableName = '')

@PrimaryKey (autoGenerate = true)
автозаполнение первой колонки

@ColumnInfo (name = '')
простоая колона


Serializable - иначе не сможем передать как целый класс,
пришлось бы передовать по отдельности переменые
Serializable не нужен, если класс не будет использоваться в других активити, передаваться
другим активити


класс MainDataBase - даёт доступ к бд или создаёт бд (должен быть абстрактынм)

companion object - дает возможность использовать наследование без инициализации класса
(в джава как статические фунцкции)
пример - MainDataBase.название фнкции()


@Volatile
когда вы применяетесь @volatile к полю класса, он инструктирует центральный
процессор всегда считывать его из оперативной памяти, а не из кэша процессора.
@Volatile
private var INSTANCE: MainDataBase? = null
все что мы будем записывать в эту переменную, многовено станет доступно для остальных потоков
эту переменую будем возвращать когда запрашиваем бд

поэтому все участники процесса будут ожидать окончания параллельной записи,
прежде чем считать значение


synhronized(this -чем блокируем) - если несколько поток пытаются запустить,
будет блокировать пока не завершится
Одна комната для размышлений (counter) и очередь из людей (threads), где каждый хочет зайти внутрь,
при этом, она рассчитана только на одного человека. В этой комнате есть дверь, которую закрывают,
если кто-то уже внутри. Но есть проблема − прямо сейчас эту дверь можно открыть снаружи, потому
что в ней нет замка.
@Synchronized будет являться замком на двери, который открывается единственным существующим ключом.
Один человек (поток) берёт ключ, заходит, закрывается изнутри. Никто другой не может зайти
в этот момент. Только после того, как ключ вернут на место, это станет возможным


оператор элвиса ?: означает что если слева что находится налл, то выдать то что справа находится
a ?: b


@DataBase (entities = [name::class])
перед классом для создания и доступа к бд


Инициализация бд
Создать инстанцию на уровне всего приложения
класс Aplication - основной класс, в нем запускаются все активити
базовый клвсс, он постоянно работает, в фоновом режиме пока открыто наше приложение
все переменные внутри доступны, но не видны
Можем унаследоваться от него создав свой класс и в нем сделать инициализацию бд,
тогда из любого активити мы сможем получить доступ нашей бд

В манифесте обязательно прописать новый класс унаследованный от Aplication,
а то он не знает наш новый класс
android:name=".activities.MainApp"

by lazy { } - блок работает когда слева null этот блок запустится один раз


DAO
Data Acess Object
аннотация для объявления интерфейса, который будет заниматься
манипулированием данными базы данных.

suspend
что-то про корутины
flow - класс в корутинах - будет подключать бд к нашему списку и автоматически все обнавлять
постояно если есть изменения
(поток информации из бд)
Можно флоу а можно не флоу, не всегда нужно обнавлять список сразу, просто лист в запросе



@Database - аннотация для объявления базы данных.
@Entity - аннотация для объявления сущности базы данных.
@Dao - аннотация для объявления интерфейса, который будет
заниматься манипулированием данными базы данных.
@PrimaryKey - аннотация для объявления первичного ключа сущности.
@ColumnInfo - аннотация для настроек конкретного столбца сущности.
@Query - аннотация, которая позволяет выполнить SQL-запрос в методах DAO-интерфейса.
@Insert - аннотация, которая позволяет выполнить вставку в таблицу базы данных.
@Update - аннотация, которая позволяет выполнить обновление некоторых строк в таблице базы данных.
@Delete - аннотация, которая позволяет выполнить удаление некоторых строк в таблице базы данных.
@Transaction - аннотация, которая помечает метод в DAO-интерфейсе как транзакция.



абстрактные классы - это то что не имеет тела
очасти как интерфейсы, могут сожержать реализацию метода могут и не содержать




